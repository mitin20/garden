kind: Module
type: kubernetes
name: postgres
description: Postgres deployment with kubernetes manifests inlined (extracted from the stable/postgresql Helm chart)
manifests:
    # Source: postgresql/templates/secrets.yaml
  - apiVersion: v1
    kind: Secret
    metadata:
      name: postgres
      labels:
        app: postgresql
        chart: postgresql-3.9.2
        release: "postgres"
        heritage: "Tiller"
    type: Opaque
    data:
      postgresql-password: ${var.postgres-password}
    # Source: postgresql/templates/svc-headless.yaml
  - apiVersion: v1
    kind: Service
    metadata:
      name: postgres-headless
      labels:
        app: postgresql
        chart: postgresql-3.9.2
        release: "postgres"
        heritage: "Tiller"
    spec:
      type: ClusterIP
      clusterIP: None
      ports:
        - name: postgresql
          port: 5432
          targetPort: postgresql
      selector:
        app: postgresql
        release: "postgres"
    # Source: postgresql/templates/svc.yaml
  - apiVersion: v1
    kind: Service
    metadata:
      name: postgres
      labels:
        app: postgresql
        chart: postgresql-3.9.2
        release: "postgres"
        heritage: "Tiller"
    spec:
      type: ClusterIP
      ports:
        - name: postgresql
          port: 5432
          targetPort: postgresql
      selector:
        app: postgresql
        release: "postgres"
        role: master
  - # Source: postgresql/templates/statefulset.yaml
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: postgres
      labels:
        app: postgresql
        chart: postgresql-3.9.2
        release: "postgres"
        heritage: "Tiller"
    spec:
      serviceName: postgres-headless
      replicas: 1
      updateStrategy:
        type: RollingUpdate
      selector:
        matchLabels:
          app: postgresql
          release: "postgres"
          role: master
      template:
        metadata:
          name: postgres
          labels:
            app: postgresql
            chart: postgresql-3.9.2
            release: "postgres"
            heritage: "Tiller"
            role: master
        spec:
          securityContext:
            fsGroup: 1001
            runAsUser: 1001
          initContainers:
            - name: init-chmod-data
              image: docker.io/bitnami/minideb:latest
              imagePullPolicy: "Always"
              resources:
                requests:
                  cpu: 250m
                  memory: 256Mi

              command:
                - sh
                - -c
                - |
                  chown -R 1001:1001 /bitnami
                  if [ -d /bitnami/postgresql/data ]; then
                    chmod  0700 /bitnami/postgresql/data;
                  fi
              securityContext:
                runAsUser: 0
              volumeMounts:
                - name: data
                  mountPath: /bitnami/postgresql
          containers:
            - name: postgres
              image: docker.io/bitnami/postgresql:10.6.0
              imagePullPolicy: "Always"
              resources:
                requests:
                  cpu: 250m
                  memory: 256Mi

              env:
                - name: POSTGRESQL_USERNAME
                  value: "postgres"
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: postgres
                      key: postgresql-password
              ports:
                - name: postgresql
                  containerPort: 5432
              livenessProbe:
                exec:
                  command:
                    - sh
                    - -c
                    - exec pg_isready -U "postgres" -h localhost
                initialDelaySeconds: 30
                periodSeconds: 10
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 6
              readinessProbe:
                exec:
                  command:
                    - sh
                    - -c
                    - exec pg_isready -U "postgres" -h localhost
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 6
              volumeMounts:
                - name: data
                  mountPath: /bitnami/postgresql
          volumes:
      volumeClaimTemplates:
        - metadata:
            name: data
          spec:
            accessModes:
              - "ReadWriteOnce"
            resources:
              requests:
                storage: "8Gi"
