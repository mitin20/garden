---
# Source: redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: redis
  labels:
    app: redis
    chart: redis-6.1.4
    release: "redis"
    heritage: "Tiller"
type: Opaque
data:
  redis-password: ${var.redis-password}
---
# Source: redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: redis
    chart: redis-6.1.4
    heritage: Tiller
    release: redis
  name: redis
data:
  redis.conf: |-
    # User-supplied configuration:
    # maxmemory-policy volatile-lru
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""

---
# Source: redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: redis
    chart: redis-6.1.4
    heritage: Tiller
    release: redis
  name: redis-health
data:
  ping_local.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_PASSWORD \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_master.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_local.sh" $1 || exit_status=$?
    "$script_dir/ping_master.sh" $1 || exit_status=$?
    exit $exit_status

---
# Source: redis/templates/redis-master-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  labels:
    app: redis
    chart: redis-6.1.4
    release: "redis"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: "redis"
    role: master

---
# Source: redis/templates/redis-slave-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: redis-slave
  labels:
    app: redis
    chart: redis-6.1.4
    release: "redis"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: "redis"
    role: slave

---
# Source: redis/templates/redis-slave-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-slave
  labels:
    app: redis
    chart: redis-6.1.4
    release: "redis"
    heritage: "Tiller"
spec:
  replicas: 1
  selector:
    matchLabels:
      release: "redis"
      role: slave
      app: redis
  template:
    metadata:
      labels:
        release: "redis"
        chart: redis-6.1.4
        role: slave
        app: redis
      annotations:
        checksum/health: 0d265b1764dff8b0866f417fa0435130cfcbb943027072f9d3277ff2dc7cec80
        checksum/configmap: f863a1b96078520044ba90b6f93228047259b97d410934284a22029eaf6672ac
        checksum/secret: bed46c594bad5453acf41624e4cebddad3188d1fd50adf5f3360cb5b80a8ecb6
    spec:
      securityContext:
        fsGroup: 1001
      serviceAccountName: "default"
      containers:
        - name: redis
          image: docker.io/bitnami/redis:4.0.13
          imagePullPolicy: "Always"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
            - -c
            - |
              if [[ -n $REDIS_PASSWORD_FILE ]]; then
                password_aux=`cat $${REDIS_PASSWORD_FILE}`
                export REDIS_PASSWORD=$password_aux
              fi
              if [[ -n $REDIS_MASTER_PASSWORD_FILE ]]; then
                password_aux=`cat $${REDIS_MASTER_PASSWORD_FILE}`
                export REDIS_MASTER_PASSWORD=$password_aux
              fi
              ARGS=("--port" "$${REDIS_PORT}")
              ARGS+=("--requirepass" "$${REDIS_PASSWORD}")
              ARGS+=("--slaveof" "$${REDIS_MASTER_HOST}" "$${REDIS_MASTER_PORT_NUMBER}")
              ARGS+=("--masterauth" "$${REDIS_MASTER_PASSWORD}")
              ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
              ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
              /run.sh "$${ARGS[@]}"
          env:
            - name: REDIS_REPLICATION_MODE
              value: slave
            - name: REDIS_MASTER_HOST
              value: redis-master
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: redis-password
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_local_and_master.sh 1
          resources: null

          volumeMounts:
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: health
          configMap:
            name: redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: redis
        - name: redis-data
          emptyDir: {}

---
# Source: redis/templates/redis-master-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-master
  labels:
    app: redis
    chart: redis-6.1.4
    release: "redis"
    heritage: "Tiller"
spec:
  selector:
    matchLabels:
      release: "redis"
      role: master
      app: redis
  serviceName: redis-master
  template:
    metadata:
      labels:
        release: "redis"
        chart: redis-6.1.4
        role: master
        app: redis
      annotations:
        checksum/health: 0d265b1764dff8b0866f417fa0435130cfcbb943027072f9d3277ff2dc7cec80
        checksum/configmap: f863a1b96078520044ba90b6f93228047259b97d410934284a22029eaf6672ac
        checksum/secret: c1a9aff755c75a492d5c1a55d5e0ad4ffb86b94ab710ec4a1f286b54255bc005
    spec:
      securityContext:
        fsGroup: 1001
      serviceAccountName: "default"
      containers:
        - name: redis
          image: "docker.io/bitnami/redis:4.0.13"
          imagePullPolicy: "Always"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
            - -c
            - |
              if [[ -n $REDIS_PASSWORD_FILE ]]; then
                password_aux=`cat $${REDIS_PASSWORD_FILE}`
                export REDIS_PASSWORD=$password_aux
              fi
              ARGS=("--port" "$${REDIS_PORT}")
              ARGS+=("--requirepass" "$${REDIS_PASSWORD}")
              ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
              ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
              /run.sh $${ARGS[@]}
          env:
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: redis-password
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_local.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_local.sh 5
          resources: null

          volumeMounts:
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath:
            - name: config
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: health
          configMap:
            name: redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: redis
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: "redis"
          component: "master"
          release: "redis"
          heritage: "Tiller"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
  updateStrategy:
    type: RollingUpdate
